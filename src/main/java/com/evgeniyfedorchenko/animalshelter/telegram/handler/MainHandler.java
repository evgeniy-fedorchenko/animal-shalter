package com.evgeniyfedorchenko.animalshelter.telegram.handler;

import com.evgeniyfedorchenko.animalshelter.backend.services.TelegramService;
import com.evgeniyfedorchenko.animalshelter.telegram.handler.buttons.callbacks.Callback;
import com.evgeniyfedorchenko.animalshelter.telegram.handler.buttons.commands.Command;
import com.evgeniyfedorchenko.animalshelter.telegram.listener.TelegramExecutor;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationContext;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.io.Serializable;
import java.net.URL;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã
 * –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

@Slf4j
@AllArgsConstructor
@Component
public class MainHandler {

    private final ApplicationContext applicationContext;
    private final TelegramService telegramService;
    private final TelegramExecutor telegramExecutor;

    /**
     * –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã {@code Command} –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     * –≤ ApplicationContext –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {@link Command} –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
     *
     * @param update –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤–æ–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å –ø–æ–º–æ—â—å—é –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
     */
    public SendMessage handleCommands(Update update) {

        Message message = update.getMessage();

        Map<String, Command> commandsMap = applicationContext.getBeansOfType(Command.class);
        String commandText = message.getText();
        Command command = commandsMap.get(commandText);

        return command == null
                ? new SendMessage(message.getChatId().toString(), "Unknown command: " + commandText)
                : command.apply(message.getChatId());
    }


    /**
     * –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã {@code Callback} –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     * –≤ ApplicationContext –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {@link Callback} –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
     *
     * @param update –û–±—ä–µ–∫—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
     * @return –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
     * {@code this.callbackQuery.getMessage().getMessageId()}
     */
    public BotApiMethod<? extends Serializable> handleCallbacks(Update update) {

        Map<String, Callback> callbacksMap = applicationContext.getBeansOfType(Callback.class);

        CallbackQuery callbackQuery = update.getCallbackQuery();
        Callback callback = callbacksMap.get(callbackQuery.getData());
        Long chatId = callbackQuery.getMessage().getChatId();

        if (callback != null) {
            Integer messageId = callbackQuery.getMessage().getMessageId();
            return callback.apply(chatId, messageId);

        } else {
            return applyUnknownUserAction(update, chatId);
        }
    }

    /* –ö–∞–∂–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫—É—é –∂–µ –æ—à–∏–±–∫—É –∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ
       –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç SendMessage, —Ç–∞–∫ —á—Ç–æ –≤–µ—Ä–Ω–µ–º —Å—Ä–∞–∑—É –æ–±–æ–±—â–µ–Ω–Ω—ã–π —Ç–∏–ø */
    public BotApiMethod<? extends Serializable> applyUnknownUserAction(Update update, Long chatId) {
        String text = """
                –Ø –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –∫–∞–∂–µ—Ç—Å—è, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é \uD83E\uDD72
                –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?)
                üëâ /start üëà""";

        if (update.hasCallbackQuery()) {

            CallbackQuery callbackQuery = update.getCallbackQuery();

            EditMessageText editMessageText = new EditMessageText(text);
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(callbackQuery.getMessage().getMessageId());
            return editMessageText;

        } else {
            return new SendMessage(chatId.toString(), text);
        }
    }


    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞). –û–±—ã—á–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥ –æ—Ç—Å—é–¥–∞ —Å—Ä–∞–∑—É –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä
     * {@code CompletableFuture<SendMessage>}, –∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–≥–æ
     * –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ SendMessage - –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ —É—à–µ–¥—à–∏–π –æ–±—ä–µ–∫—Ç
     * {@code CompletableFuture<SendMessage>} –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω. –ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π —Ñ–æ—Ç–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–æ–º –∂–µ
     * –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–æ –µ–≥–æ —É–∂–µ –Ω–∏–∫—Ç–æ –Ω–µ –∂–¥–µ—Ç
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
     * @return –≠–∫–∑–µ–º–ø–ª—è—Ä CompletableFuture<SendMessage> –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     */
    @Async
    public CompletableFuture<SendMessage> savePhoto(Message message) {

        PhotoSize largestPhoto = message.getPhoto().stream()
                .max((photo1, photo2) -> Integer.compare(
                        photo2.getWidth() * photo2.getHeight(),
                        photo1.getWidth() * photo1.getHeight()))
                .orElseThrow();

        CompletableFuture<SendMessage> future = CompletableFuture.supplyAsync(() -> {
            return new SendMessage(String.valueOf(message.getChatId()), "photo saved"); // TODO 28.05.2024 21:10 - –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
        });

        future.thenAcceptAsync(_ -> {
            URL photoUrl = telegramExecutor.getPhotoUrl(largestPhoto);
            telegramService.savePhoto(photoUrl, message.getChatId());
        });
        return future;
    }
}
