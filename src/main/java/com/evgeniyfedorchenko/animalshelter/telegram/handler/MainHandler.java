package com.evgeniyfedorchenko.animalshelter.telegram.handler;

import com.evgeniyfedorchenko.animalshelter.backend.services.TelegramService;
import com.evgeniyfedorchenko.animalshelter.telegram.handler.buttons.MessageUtils;
import com.evgeniyfedorchenko.animalshelter.telegram.handler.buttons.callbacks.Callback;
import com.evgeniyfedorchenko.animalshelter.telegram.handler.buttons.commands.Command;
import com.evgeniyfedorchenko.animalshelter.telegram.listener.TelegramExecutor;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationContext;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.PartialBotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.io.Serializable;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;


/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã
 * –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
@Slf4j
@AllArgsConstructor
@Component
public class MainHandler {

    private final ApplicationContext applicationContext;
    private final TelegramService telegramService;
    private final TelegramExecutor telegramExecutor;
    private final RedisTemplate<Long, Long> redisTemplate;

    /**
     * –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã {@code Command} –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     * –≤ ApplicationContext –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {@link Command} –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
     *
     * @param update –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
     * @return –°–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤–æ–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å –ø–æ–º–æ—â—å—é –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
     */
    public SendMessage handleCommands(Update update) {

        Message message = update.getMessage();

        Map<String, Command> commandsMap = applicationContext.getBeansOfType(Command.class);
        String commandText = message.getText();
        Command command = commandsMap.get(commandText);

        return command == null
                ? new SendMessage(message.getChatId().toString(), "Unknown command: " + commandText)
                : command.apply(message.getChatId());
    }


    /**
     * –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã {@code Callback} –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     * –≤ ApplicationContext –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {@link Callback} –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
     *
     * @param update –û–±—ä–µ–∫—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
     * @return –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
     * {@code this.callbackQuery.getMessage().getMessageId()}
     */
    public BotApiMethod<? extends Serializable> handleCallbacks(Update update) {

        Map<String, Callback> callbacksMap = applicationContext.getBeansOfType(Callback.class);

        CallbackQuery callbackQuery = update.getCallbackQuery();
        Callback callback = callbacksMap.get(callbackQuery.getData());
        Long chatId = callbackQuery.getMessage().getChatId();

        if (callback != null) {
            Integer messageId = callbackQuery.getMessage().getMessageId();
            return callback.apply(chatId, messageId);

        } else {
            return applyUnknownUserAction(update);
        }
    }

    public BotApiMethod<? extends Serializable> applyUnknownUserAction(Update update) {
        String text = """
                –Ø –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –∫–∞–∂–µ—Ç—Å—è, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é \uD83E\uDD72
                –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?)
                üëâ /start üëà""";


        if (update.hasCallbackQuery()) {

            CallbackQuery callbackQuery = update.getCallbackQuery();
            String chatId = String.valueOf(callbackQuery.getMessage().getChatId());

            EditMessageText editMessageText = new EditMessageText(text);
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(callbackQuery.getMessage().getMessageId());
            return editMessageText;

        } else {
            String chatId = String.valueOf(update.getMessage().getChatId());
            return new SendMessage(chatId, text);
        }
    }


    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞). –û–±—ã—á–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥ –æ—Ç—Å—é–¥–∞ —Å—Ä–∞–∑—É –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä
     * {@code CompletableFuture<SendMessage>}, –∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–≥–æ
     * –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ SendMessage - –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ —É—à–µ–¥—à–∏–π –æ–±—ä–µ–∫—Ç
     * {@code CompletableFuture<SendMessage>} –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω. –ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π —Ñ–æ—Ç–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–æ–º –∂–µ
     * –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–æ –µ–≥–æ —É–∂–µ –Ω–∏–∫—Ç–æ –Ω–µ –∂–¥–µ—Ç
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
     * @return –≠–∫–∑–µ–º–ø–ª—è—Ä CompletableFuture<SendMessage> –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
     */
    @Async
    public CompletableFuture<SendMessage> savePhoto(Message message) {

        PhotoSize largestPhoto = message.getPhoto().stream()
                .max(Comparator.comparing(PhotoSize::getFileSize))
                .orElseThrow();

        CompletableFuture<SendMessage> future = CompletableFuture.supplyAsync(() -> {
            return new SendMessage(String.valueOf(message.getChatId()), "photo saved"); // TODO 28.05.2024 21:10 - –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
        });

        future.thenAcceptAsync(_ -> telegramExecutor.getPhotoUrl(largestPhoto).ifPresentOrElse(
                        photoUrl -> telegramService.savePhoto(photoUrl, message.getChatId()),
                              () -> log.error("Cannot save photo of UserChatId={}", message.getChatId())
                )
        );
        return future;
    }

    public PartialBotApiMethod<Message> communicationWithVolunteer(Message message) {
        Long l = redisTemplate.opsForValue().get(message.getChatId());
        String answeringChatId = String.valueOf(l);

        InlineKeyboardMarkup keyboardMarkup = MessageUtils.getMarkupWithOneLinesButtons(new HashMap<>(Map.of("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ö–æ–ª–±–µ–∫")));

        /* –†–æ–¥–∏—Ç–µ–ª—å SendSticker –∏ SendPhoto - "SendMediaBotMethod<T extends Serializable>", –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç
           –º–µ—Ç–æ–¥–∞ setReplyMarkup(), –æ–Ω –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ—Ç –≤ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–∞—Ö. –ê SendMessage –≤–æ–æ–±—â–µ –∏–∑ –¥—Ä—É–≥–æ–π
           –≤–µ—Ç–∫–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∏—Ö –±–ª–∏–∂–∞–π—à–∏–π –æ–±—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å - "PartialBotApiMethod<T extends Serializable>"
           –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑ –º–µ—Ç–æ–¥–æ–≤. –ü–æ—ç—Ç–æ–º—É –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç
           –í–æ–æ–±—â–µ, –¥–æ–≤–æ–ª—å–Ω–æ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è */

        if (message.hasSticker()) {
            String fileId = message.getSticker().getFileId();
            SendSticker sendSticker = new SendSticker(answeringChatId, new InputFile(fileId));
            sendSticker.setReplyMarkup(keyboardMarkup);

            return sendSticker;
        }

        if (message.hasPhoto()) {
            PhotoSize largestPhoto = message.getPhoto().stream()
                    .max(Comparator.comparing(PhotoSize::getFileSize))
                    .orElseThrow();

            SendPhoto sendPhoto = new SendPhoto(answeringChatId, new InputFile(largestPhoto.getFileId()));
            sendPhoto.setCaption(message.getCaption());
            sendPhoto.setReplyMarkup(keyboardMarkup);

            return sendPhoto;
        }

        SendMessage sendMessage = new SendMessage(answeringChatId, message.getText());
        sendMessage.setReplyMarkup(keyboardMarkup);
        return sendMessage;
    }
}
